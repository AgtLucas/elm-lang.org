
import Website.Skeleton (skeleton)
import Window
import JavaScript as JS

port title : String
port title = "Elm 0.11 - Ports"

main = lift (skeleton everything) Window.dimensions

everything wid =
    let w = min 600 wid
    in  width w intro

intro = [markdown|

<style type="text/css">
p { text-align: justify }
pre { background-color: white;
      padding: 10px;
      border: 1px solid rgb(216, 221, 225);
      border-radius: 4px;
}
code > span.kw { color: #268BD2; }
code > span.dt { color: #268BD2; }
code > span.dv, code > span.bn, code > span.fl { color: #D33682; }
code > span.ch { color: #DC322F; }
code > span.st { color: #2AA198; }
code > span.co { color: #93A1A1; }
code > span.ot { color: #A57800; }
code > span.al { color: #CB4B16; font-weight: bold; }
code > span.fu { color: #268BD2; }
code > span.re { }
code > span.er { color: #D30102; font-weight: bold; }
</style>

<h1><div style="text-align:center">Elm 0.12
<div style="padding-top:4px;font-size:0.5em;font-weight:normal">*Easy user input, trampolining, and debugging*</div></div>
</h1>

The past few months have focused on making Elm great for industrial use. You
can see this in recent releases like the [REPL](/blog/announce/Repl.elm), the
[package manager](/blog/announce/PackageManager.elm), and the [drastically
improved JS interop](/blog/announce/0.11.elm). This release makes the
next step, making it easy to work with input elements like text fields and
checkboxes.

Working with input elements has long been pretty tricky in Elm. After
[conferences](http://elm-lang.org/Learn.elm#conference-videos) I always get
questions along the lines of, &ldquo;that
[Mario](/edit/examples/Intermediate/Mario.elm) example is really cool, but can
I use this approach for the web forms and dashboards I write every day at
work?&rdquo; As of today, the answer is a definite yes! Elm 0.12 makes it easy
to create and style inputs in a purely functional way.

<EXAMPLES HERE>

Normally Elm release notes dive into the new features. In this case, the new
APIs are important enough that [the tutorial on user input](/learn/Inputs.elm)
made it as an entire post on the [Learn](/Learn.elm) page of [elm-lang.org](/).
That post has tons of [interactive examples](/learn/Inputs.elm#tons-of-examples)
ranging from creation of text fields and drop downs to validated forms,
calculators, and todo lists. Definitely check it out to see how you can start
making "traditional web apps" with Elm.

The key insight behind these changes comes from [Spiros
Eliopoulos](https://github.com/seliopou) and his work on
[elm-d3](https://github.com/seliopou/elm-d3). From there [Jeff
Smitts](https://github.com/Apanatshka) suggestions inspired and improved the
final API. Huge thank you to you both!

## Changelog

This release also comes with a bunch of changes and improvements. I am going to
just list them 

#### Breaking Changes:

  * Overhaul `Graphics.Input` library (inspired by [Spiros Eliopoulos](http://github.com/seliopou) and Jeff Smitts)
  * Overhaul `Text` library to accomodate new `Graphics.Input.Field`
    library and make the API more consistent overall
  * Overhaul `Regex` library (inspired by Attila Gazso)
  * Change syntax for `import open List` to `import List (..)`
  * Improved JSON format for types generated by `elm-doc`
  * Remove problematic Mouse.isClicked signal (thanks [Janis Voigtländer](https://github.com/jvoigtlaender))
  * Revise the semantics of keepWhen and dropWhen to only update when
    the filtered signal changes (thanks [Max New](https://github.com/maxsnew) and [Janis Voigtländer](https://github.com/jvoigtlaender))

#### Improvements:

  * Add `Graphics.Input.Field` for customizable text fields
  * Add the
    [`Trampoline`](http://library.elm-lang.org/catalog/evancz-Elm/0.12/Trampoline)
    library (thanks to @maxsnew and @timthelion). This helps you get around
    JavaScript's lack of tail call elimination in a fully general way.
  * Add [`Debug`](http://library.elm-lang.org/catalog/evancz-Elm/0.12/Debug)
    library (inspired by @timthelion) which lets you log values to the developer
    console. This is intended specifically for debugging!
  * Drastically improved performance on markdown parsing. Thanks to @Dandandan
    for discovering that we were appending lists in the wrong direction!
  * Add `Date.fromTime` function
  * Use pointer-events to detect hovers on layered elements (thanks to @Xashili)
  * Fix bugs in `Bitwise` the library.
  * Fix bug when exporting records of Maybe values through ports (thanks to [Max New](https://github.com/maxsnew))

## Notes about replacing `open`

The `open` keyword is gone now. If you want to import everything from the `List`
module into local scope you use this syntax:

```haskell
import List (..)
```

So there is nicer syntax, but this is the least prefered method of
importing values of [the four possiblities](/learn/Syntax.elm#modules). It is
convenient for quickly prototyping or hacking something together, but it does
not scale well. Imagine you do [26 imports like this][imports], bringing tons
of functions into local scope. When I want to find the definition of
[`isFunPtrTy`][function] I have no easy way to know which of those 26 modules
it came from!

 [imports]: https://github.com/ghc/ghc/blob/master/compiler/typecheck/TcForeign.lhs#L33-L60
 [function]: https://github.com/ghc/ghc/blob/master/compiler/typecheck/TcForeign.lhs#L326

So use this new syntax with care. I hope the ellipsis in `import List (..)` will
entice you to fill in the particular values you are using. As IDE support for
Elm improves, it will become possible to automate this dependency finding, so
my eventual hope is that `import List (..)` can be removed entirely.

## Machine-readable types

All libraries uploaded to [library.elm-lang.org](http://library.elm-lang.org/)
generate a JSON file filled with types, documentation, and precedence/associativity
for all exported values ([like
this](http://library.elm-lang.org/catalog/evancz-Elm/0.12/docs.json)). The goals
is to make it really easy to work with library metadata to create tools like
Elmoogle and auto-complete in IDEs. This release improves the format for types,
making them much easier to work with.

<br/>

## Thank you!

Thanks again to [Spiros Eliopoulos](https://github.com/seliopou) and [Jeff
Smitts](https://github.com/Apanatshka) for inspiring and guiding the new
approach to user input. Thanks to everyone on [the mailing list][list] for
discussing and reviewing APIs, docs, and examples as this release came together!

  [list]: https://groups.google.com/forum/#!forum/elm-discuss

|]
